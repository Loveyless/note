import{_ as a,c as t,o as i,ag as e}from"./chunks/framework.M6oQTw7-.js";const _=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"algorithm/数据结构/1.栈队列.md","filePath":"algorithm/数据结构/1.栈队列.md","lastUpdated":1668527698000}'),l={name:"algorithm/数据结构/1.栈队列.md"};function s(r,p,o,u,h,n){return i(),t("div",null,[...p[0]||(p[0]=[e('<h2 id="前置知识" tabindex="-1">前置知识 <a class="header-anchor" href="#前置知识" aria-label="Permalink to &quot;前置知识&quot;">​</a></h2><p>在 JavaScript 中，栈和队列的实现一般都要依赖于数组，可以把栈和队列都看作是“特别的数组”。</p><p>两者的区别在于，它们各自对数组的增删操作有着不一样的限制。</p><p><strong>数组的方法</strong></p><p>添加元素方法</p><ul><li><p>unshift 方法-添加元素到数组的头部</p></li><li><p>push 方法-添加元素到数组的尾部</p></li><li><p>splice 方法-添加元素到数组的任何位置(第三个参数)</p></li></ul><p>删除元素方法</p><ul><li><p>shift 方法-删除数组头部的元素</p></li><li><p>pop 方法-删除数组尾部的元素</p></li><li><p>splice 方法-删除数组任意位置的元素</p></li></ul><h2 id="栈-stack-——只用-pop-和-push-完成增删的-数组" tabindex="-1">栈（Stack）——只用 pop 和 push 完成增删的“数组” <a class="header-anchor" href="#栈-stack-——只用-pop-和-push-完成增删的-数组" aria-label="Permalink to &quot;栈（Stack）——只用 pop 和 push 完成增删的“数组”&quot;">​</a></h2><p>栈是一种后进先出(LIFO，Last In First Out)的数据结构。</p><ul><li>只允许从尾部添加元素</li><li>只允许从尾部取出元素</li></ul><p>对应到数组的方法，刚好就是 push 和 pop。因此，我们可以认为在 JavaScript 中，栈就是限制只能用 push 来添加元素，同时只能用 pop 来移除元素的一种特殊的数组。</p><p>力扣上关于栈的题目 20,155,232,844,224,682,496</p><h2 id="队列-queue-——只用-push-和-shift-完成增删的-数组" tabindex="-1">队列（Queue）——只用 push 和 shift 完成增删的“数组” <a class="header-anchor" href="#队列-queue-——只用-push-和-shift-完成增删的-数组" aria-label="Permalink to &quot;队列（Queue）——只用 push 和 shift 完成增删的“数组”&quot;">​</a></h2><p>队列是一种先进先出（FIFO，First In First Out）的数据结构。</p><ul><li>只允许从尾部添加元素</li><li>只允许从头部移除元素</li></ul><p>也就是说整个过程只涉及了数组的 push 和 shift 方法。</p>',17)])])}const d=a(l,[["render",s]]);export{_ as __pageData,d as default};
